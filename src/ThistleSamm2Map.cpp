/*
 * ThistleSamm2Map.cpp
 *
 *  Created on: Mar 1, 2018
 *      Author: joosep
 */

#include "ThistleSamm2Map.h"

ThistleSamm2Map::ThistleSamm2Map() {
	data["00000000"]="FLRF FLRU UD DF";
	data["00010020"]="FLR*B BLU UR*D DF";
	data["00011022"]="FLF FU UD DL LF FR*F";
	data["00011121"]="FLF FRB*U UL*F FL";
	data["00012201"]="FLD DLFRD DBU U";
	data["00020121"]="FLF FL LD DL LD DRB";
	data["00100020"]="LFR*F*LR RU UD DF*";
	data["00102000"]="LFR*F*LR RU UD DF";
	data["00110022"]="LB BRFL*B BR*BU U";
	data["00110100"]="FLFR*B BLF*L LB*";
	data["00111012"]="FLF FRBLR RB BL*";
	data["00112200"]="FLRFU URFBL";
	data["00112221"]="FLF FR RBU UL*F FL";
	data["00120000"]="FLFBLF*BLB*";
	data["00120012"]="FLBU UBL LB BLB";
	data["00120021"]="FLB BL LBD DBLB";
	data["00120102"]="FLFR RB BLF*L LB*";
	data["00121002"]="FLF FL LF FU URD DF";
	data["00121011"]="FLFL LF*B BLB*L L";
	data["00121101"]="FLF FL*FRFLB";
	data["00122100"]="FLFBLF*B*LB*";
	data["00200001"]="FLF FLD DR*U UFU U";
	data["00200010"]="FLF FLF FD DR*U UF*";
	data["00200100"]="FLF FLD DR*U UFL L";
	data["00201000"]="FLF FLF FD DR*U UF";
	data["00211002"]="FLR*B BLFL LRB*";
	data["00211122"]="FLF FL*FL*FL LB*";
	data["00220011"]="FLFLD DLF*LB*";
	data["00220020"]="FLF FLR RD DR*U UF*";
	data["00222000"]="FLF*LR*U UFL LB*";
	data["01000212"]="FLU URF*D DL LFR*";
	data["01002012"]="FLF FU UD DL LF FR*F*";
	data["01002102"]="FLD DLFRD DBL L";
	data["01002222"]="FLR RB*L LRB*U UR";
	data["01012011"]="FLFB*LRFU UR";
	data["01012020"]="FL LF FU UD DRF FR RF";
	data["01012200"]="LF*BRBLR*D DF";
	data["01020012"]="FLF FL LU URD DFL L";
	data["01020201"]="FLR RU UB*D DR*F*L L";
	data["01021020"]="LF FLU UBLD DF*U U";
	data["01022121"]="FLB BU UBLR*F*R*";
	data["01022202"]="FLU UR*BR*FU UL";
	data["01100202"]="LF FU UB*LR*FB BL";
	data["01102002"]="L LF FU UD DRF FR RFR";
	data["01102011"]="FLFB*LRFU UR*";
	data["01102101"]="FLF FRBL*F FL*F F";
	data["01102122"]="FLU UB*RFB BU UL";
	data["01111011"]="FLFR*U UBLFU U";
	data["01111020"]="LFLB*R*B*U UL*F*";
	data["01112022"]="LF FL LFR RU UD DRF";
	data["01120011"]="FLFL LB BRF*LB*";
	data["01120200"]="FLR RF*LU UD DFU U";
	data["01121010"]="FLFB BL LF*LB*L L";
	data["01122111"]="FLFL LR RF*B BLB*";
	data["01210110"]="FLFLB*RU UR*F";
	data["01210212"]="FLF FLFD DR*U UF*";
	data["01211101"]="FLFLB*RU UR*F*";
	data["01211202"]="FLF FLFD DR*U UF";
	data["01212021"]="FLF*RF*B*L*F FL*";
	data["01212201"]="FLF FRD DF*D DL*B";
	data["01220100"]="FLFLR*FB BR RB";
	data["01222110"]="FLFB BRF*L*BL L";
	data["02010000"]="FLR RF FLU UD DFU U";
	data["02010111"]="FLFL LU UB*RF*U U";
	data["02010201"]="LF FLU UBLD DFL L";
	data["02011020"]="FLRU UB*D DR*FU U";
	data["02012100"]="FLR RBLRU UF*R";
	data["02020200"]="FLU UD DF FBL LR*F";
	data["02021001"]="FLFL LF*LF FBU U";
	data["02022000"]="FLR RFRB BL*RB";
	data["02000111"]="FLFU UBLF*U UL L";
	data["02102010"]="FLR RF*L*R*B BR*B";
	data["02102100"]="FLR RBLRU UF*R*";
	data["02110011"]="FLFR RU UBLFU U";
	data["02110110"]="FLFLD DRF*L LB*";
	data["02111022"]="FLRFL*B BR*B*U U";
	data["02111100"]="FLFL LRF*LF FB*";
	data["02111121"]="FLFL LFBLF FL*";
	data["02112021"]="FLF*RF*BL*F FL*";
	data["02112120"]="FLF*R*F*BL*F FL*";
	data["02112201"]="LFLRU ULBL*F";
	data["02112222"]="FLU URFBU ULF F";
	data["02120010"]="FLFLRD DF*L LB*";
	data["02120100"]="FLFLRFB BR RB";
	data["02120112"]="FLFRF FLFL LB*";
	data["02121012"]="FLFU UL*FU UBU U";
	data["02122020"]="FLFB BL*B*L*F*L*";
	data["02200011"]="FLFL LF*LBL LR R";
	data["02202000"]="FLF FLR RD DR*U UF";
	data["02210112"]="FLFR*FR RF FL*B";
	data["02212110"]="FLFB BR RF*L*BL L";
	data["02220000"]="FLFLF*R RU UD DF";
	data["02222010"]="FLFLR*D DF*L LB*";
	data["10000002"]="FLR*B BL*U URU UB";
	data["10002111"]="FLF FB BL*F FLF FB";
	data["10010001"]="FLFR*B BLF*L LB";
	data["10010010"]="FLF FLB BLU UD DF";
	data["10010022"]="LFRFL LU URD DF";
	data["10011012"]="FLF FB BL LU URD DF";
	data["10012002"]="LF FLR RU UBLD DF";
	data["10012011"]="FLFBLRFU UR";
	data["10020000"]="FLFBLF*BLB";
	data["10020120"]="FLB BL LBD DBLB*";
	data["10020201"]="FLFR RB BLF*L LB";
	data["10020210"]="FLBU UBL LB BLB*";
	data["10020222"]="FLU UR*B*R RF*D DR";
	data["10021011"]="FLFR RFD DRD DB*";
	data["10022001"]="FLFBLF*B*LB";
	data["10022010"]="FLF*LU UR RFL LB";
	data["10101000"]="FLR RU UF FBU ULF";
	data["10101012"]="FLF FRB*LR RB BL*";
	data["10101222"]="FLU UB*RFB BU UL*";
	data["10102011"]="FLFBLRFU UR*";
	data["10102020"]="FLB BRFL*B BR*B";
	data["10111110"]="FLFL LRU UB*RF";
	data["10111212"]="FLFRBR*FD DR*";
	data["10111221"]="FLFRBR*FD DR";
	data["10112022"]="FLF*R RBR*F*D DR";
	data["10112112"]="FLFL LBRFU UR";
	data["10112121"]="FLFL LBRFU UR*";
	data["10120002"]="FLBLBD DLD DB*";
	data["10120011"]="FLFL LF FR RFLB";
	data["10120110"]="FLFL LF FR RFLB*";
	data["10120200"]="FLR RF*LU UD DF*U U";
	data["10121010"]="FLFL LRF*LB*L L";
	data["10122111"]="FLFR*F*B BL*B*U U";
	data["10200222"]="FLU UR*B*R RF*D DR*";
	data["10210002"]="FLR RF*LF FU UD DF*";
	data["10210110"]="FLFB BL LR*F*LB*";
	data["10210221"]="FLF*RF*B*L*F FL";
	data["10211010"]="FLFL LR*F*LB*L L";
	data["10212210"]="FLF FU UFU UB BL*B";
	data["10220001"]="FLFLF*L*B BL*B";
	data["10220010"]="FLFL LF FR*FLB*";
	data["10220100"]="FLFL LF FRFLB*";
	data["10220211"]="FLFB BL*BL*F*L";
	data["10221012"]="FLFR RB BRF*L*B*";
	data["10222011"]="FLFB BR RF*L*B*U U";
	data["10222101"]="FLFB*LF*B*LB";
	data["10222200"]="FLF FL LD DB*L*U UF";
	data["11001000"]="FLF FLB BLU UD DF*";
	data["11001012"]="FLFU UFRB*D DR*";
	data["11001021"]="FLFU UFRB*D DR";
	data["11001120"]="FLF FRB*L*F FL*U U";
	data["11002221"]="FLF*B*D DLFD DL";
	data["11010000"]="LFR*BLF*BLB";
	data["11010012"]="FLF*L LBRF*U UR";
	data["11010102"]="FLF*L LB*RF*U UR";
	data["11012022"]="LF FRFB*R*F*D DR";
	data["11020110"]="FLFL LB BRF*LB";
	data["11021010"]="FLFL LR*F*LBU U";
	data["11100012"]="FLF*B*RF*L LU UR";
	data["11100111"]="FLFR*U UBLFL L";
	data["11100120"]="FLF*L LB*RF*U UR*";
	data["11100210"]="FLB BR RF*LU UD DF";
	data["11101110"]="FLFL LRU UB*RF*";
	data["11101122"]="FLF FBU UL*F FL*U U";
	data["11101200"]="FLR RU UF*R*B*D DR";
	data["11102022"]="LF FRFB*R*F*D DR*";
	data["11102211"]="FLF FBU UL*F FLF F";
	data["11110011"]="FLFRU UR RBLF";
	data["11110212"]="FLRBL*F*U UF*L*";
	data["11111001"]="FLFRU UR RBLF*";
	data["11111010"]="FLFR RU URBLF";
	data["11112012"]="FLRBL*F*U UF*L";
	data["11112111"]="FLFL LB*RFU UR";
	data["11112222"]="FLR*U UL LFBD DL";
	data["11120001"]="FLFLU UL*BLF*";
	data["11121012"]="FLF FR*B*LR RB BL*";
	data["11121201"]="FLFB*R*F FD DF*R*";
	data["11121222"]="FLF FL LFU UD DRF";
	data["11122122"]="FLRFBL*F FU UL*";
	data["11200002"]="FLR RF*LF FU UD DF";
	data["11202000"]="LFR*F FB*R*D DF*R";
	data["11210001"]="FLFL*F*R*FRB";
	data["11211210"]="FLFB*R*F FD DF*R";
	data["11212101"]="FLF FR*B*L*F FL*F F";
	data["11221122"]="FLF FL LF*LF FLB*";
	data["11222001"]="FLF FB BD DF*D DL*B";
	data["11222211"]="FLR*FL*B BRF FB";
	data["12001002"]="FLF FL LB BD DL*U UF";
	data["12001122"]="FLF FL*BU UBR*B*";
	data["12002010"]="FLR RF*L*R*B BR*B*";
	data["12010011"]="FLFLD DRF*L LB";
	data["12011001"]="FLFL LRF*LF FB";
	data["12011022"]="FLF FB BL LU UD DRF";
	data["12012120"]="FLBL*D DFB BR*F";
	data["12020010"]="FLFLRD DF*L LB";
	data["12020211"]="FLFRF FLFL LB";
	data["12102000"]="FLR RF*LU UD DFL L";
	data["12102012"]="FLF FU UB*LFB BL*";
	data["12110001"]="FLFLU UL*BLF";
	data["12111021"]="FLF FB*L LD DLF FL*";
	data["12111120"]="FLFR RFBL*F FL*";
	data["12111201"]="FLFBD DB*L LRB";
	data["12112002"]="FLF*R RBR*D DF*R*";
	data["12112020"]="FLF*R RBR*D DF*R";
	data["12112101"]="FLFBRFL LU UR*";
	data["12112110"]="FLFBRFL LU UR";
	data["12112122"]="FLR RFB BL*F FL*B*";
	data["12121110"]="FLFL*RB*LF*L*";
	data["12121200"]="FLF FB*R*FD DF*R*";
	data["12121212"]="FLFR*B*R*FD DR*";
	data["12122001"]="FLFLU UFLBL";
	data["12200100"]="FLFLR*F*L LB*U U";
	data["12200202"]="FLR RF*B*R*D DFR*";
	data["12200220"]="FLF FL LD DB*L*U UF*";
	data["12210000"]="FLU UFL LF FU UR*B*";
	data["12211020"]="FLFL*R*B*L*F*L*";
	data["12211101"]="FLFL LFLF FL*B*";
	data["12211110"]="FLFL*R*B*LF*L*";
	data["12211221"]="FLFR*B*R*FD DR";
	data["12212001"]="FLFL*FBLFL*";
	data["12212100"]="FLFL*FB*LFL*";
	data["12212211"]="FLFR*F FR RFL*B";
	data["12220011"]="FLFLF FRFL LB";
	data["12220101"]="FLFLFRF FL LB";
	data["12220110"]="FLFL LU UR*F*U UB*";
	data["12220212"]="FLFR RFR*F FL*B";
	data["12221010"]="FLFL*R RBLF*L*";
	data["12221112"]="FLFL LU UR RB*R*F";
	data["12221211"]="FLFRF FR RFL*B";
	data["20000202"]="FLR RF*L LD DL*U UF";
	data["20010111"]="FLFL LB BR*F*LB";
	data["20010222"]="FLR RFL LD DL*U UF*";
	data["20011221"]="FLF FL*FL*FL LB";
	data["20012001"]="FLF FLU UBLD DF";
	data["20012010"]="FLF FL LU URD DFU U";
	data["20012211"]="FLF FB BU UFU UL*B";
	data["20020110"]="FLF FLD DLF*LB";
	data["20021001"]="FLF FU UL LBL*D DF*";
	data["20022000"]="FLF*LR*U UFL LB";
	data["20101110"]="FLFL LF*B BLB*U U";
	data["20101122"]="FLF FR RB BL*F FLB*";
	data["20110221"]="FLF*RF*BL*F FL";
	data["20111010"]="FLFBU UR*FD DR";
	data["20111022"]="FLFBU UFL*F FL";
	data["20111121"]="FLFL LFBLF FL";
	data["20112012"]="FLF FU UFU UB BL*B*";
	data["20112021"]="FLF*RBR*F*D DR";
	data["20112201"]="LFL LF FL LRFL*B";
	data["20120010"]="FLFL LF FR*FLB";
	data["20120022"]="FLF FL LF*U URD DF";
	data["20120100"]="FLFLF*L*B BL*B*";
	data["20120112"]="FLFU ULU UF*L LB*";
	data["20120220"]="FLFB BL*B*L*F*L";
	data["20121210"]="FLFR RB BRF*L*B";
	data["20122011"]="FLFB BRF*L*B*U U";
	data["20122020"]="FLF FLFB BL*R RB*";
	data["20122101"]="FLFB*LF*B*LB*";
	data["20122110"]="FLF FR*F FB BL*B*U U";
	data["20200101"]="FL LFB*D DFL LR RB";
	data["20201010"]="FLF FB BLD DR*U UF";
	data["20210112"]="FLFL LF FL*FL LB*";
	data["20210211"]="FLFL LF FL*FL LB";
	data["20211111"]="FLFL LFB*LF FL";
	data["20212101"]="FLF*R*B BU UFL*B";
	data["20220012"]="FLFL LFR RF FLB";
	data["20220210"]="FLFL LFR RF FLB*";
	data["21000021"]="FLF FLU UBLD DF*";
	data["21002202"]="FLR RFL LD DL*U UF";
	data["21011010"]="FLFL LRF*LBU U";
	data["21012021"]="FLU UF*U UB*L*F FL*";
	data["21012102"]="FLF FRD DF*D DL*B*";
	data["21020001"]="FLFLRF*L LBL L";
	data["21021120"]="FLFR RFL*F FLB";
	data["21100212"]="FLF FU UB*LFB BL";
	data["21100221"]="FLRFL*B BR*B*L L";
	data["21101220"]="FLRFL*B BR*BL L";
	data["21102012"]="FLF FR RBL*F FLF F";
	data["21110001"]="FLFLF FLFLB";
	data["21111120"]="FLFR RFBL*F FL";
	data["21112122"]="LF FRFL LRFLB";
	data["21120201"]="FLFLU UFLBL*";
	data["21121221"]="FLF FL LF*LF FLB";
	data["21122100"]="FLF FB BD DF*D DL*B*";
	data["21201012"]="FLFB BR RF*L*F FB*";
	data["21201210"]="FLFB BR RF*L*F FB";
	data["21210000"]="FLRFLRU UD DF";
	data["21210120"]="FLFL*R*B*L*F*L";
	data["21210201"]="FLFL*FBLFL";
	data["21211110"]="FLFL*R*B*LF*L";
	data["21211200"]="FLFL*FB*LFL";
	data["21211212"]="FLF FU UFU UL*B*L L";
	data["21211221"]="FLFU UL LR RBL*F*";
	data["21221112"]="FLFLB*L*U ULF*";
	data["22000011"]="FLF FU UL LBL*D DF";
	data["22000101"]="FLFL LF*LF FBL L";
	data["22010112"]="FLF FR RF*R*F*L*B*";
	data["22010211"]="FLFR*FR RF FL*B*";
	data["22021011"]="FLFL*F FBRF*R*";
	data["22022010"]="FLFLR*D DF*L LB";
	data["22022211"]="FLFR RFR RF FL*B*";
	data["22100211"]="FLFU UL*FU UBL L";
	data["22102212"]="FLF FR RU UFU UL*B";
	data["22102221"]="FLF FL*B*U UBR*B";
	data["22110000"]="FLU UFL LF FU UR*B";
	data["22110201"]="FLFL LFU UR*U UB";
	data["22111101"]="FLFL LFLF FL*B";
	data["22111212"]="FLFR*BR*FD DR*";
	data["22120011"]="FLFL LU UR*F*U UB";
	data["22120110"]="FLFLF FRFL LB*";
	data["22120212"]="FLFR RFR*F FL*B*";
	data["22120221"]="FLFLU ULBL*F*";
	data["22122012"]="FLFR RF FR*FL*B*";
	data["22122201"]="FLFLU ULBL*F";
	data["22200021"]="FLFL*B*L*F*L*U U";
	data["22201011"]="FLFL*F FBRF*R";
	data["22201101"]="FLFL*F FB*RF*R";
	data["22201110"]="FLFL*B*LF*LF F";
	data["22210200"]="FLFL*FB*L*FL";
	data["22210212"]="FLFR*FR*F FL*B";
	data["22211112"]="FLFLB*L*U ULF";
	data["22212000"]="FLFL*FB*L*FL*";
	data["22212102"]="FLFLF FL*FL*B*";
	data["22212201"]="FLFLF FL*FL*B";
	data["22220001"]="FLFLFL LF FL LB";
	data["22220022"]="FLFL*F*RFR*B";
	data["22220112"]="FLFLF FR*FL LB*";
	data["22220211"]="FLFLF FR*FL LB";
	data["22220220"]="FLFL*F*RFR*B*";
	data["22221111"]="FLFRB BR*F*L*B";
	data["22222020"]="FLF FR RU ULD DR*F";
	data["22222212"]="FLFRFR*F FL*B";
}

valem ThistleSamm2Map::getValem(std::string voti){
	if(data.count(voti)){
		valem valjund {data[voti]};
		return valjund;
	} else {
		valem valjund;
		return valjund;
	}
}

ThistleSamm2Map::~ThistleSamm2Map() {
	// TODO Auto-generated destructor stub
}

